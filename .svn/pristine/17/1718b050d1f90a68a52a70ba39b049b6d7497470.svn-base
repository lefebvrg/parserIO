package fr.chru.strasbourg.test.parserIO;

import static org.junit.Assert.*;

import java.util.Calendar;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.BeforeClass;
import org.junit.Test;

import fr.chru.strasbourg.enums.parserIO.Type;
import fr.chru.strasbourg.jam.common.date.XTimestamp;
import fr.chru.strasbourg.objects.parserIO.CodeBarreStructure;
import fr.chru.strasbourg.objects.parserIO.ParserIO;

/**
 * Test de la classe {@link ParserIO}
 * @author Guillaume Lefebvre
 */
public class ParserIOTest {

  private final static Logger logger = Logger.getLogger(ParserIOTest.class);

  /**
   * Init valable pour tous les tests
   */
  @BeforeClass
  public static void setUp() {
    // On définit un pattern plus simp)le que celui par défaut pour le logger
    PatternLayout patternLayout = new PatternLayout("[%t] %-5p %M - %m%n");
    ConsoleAppender consoleAppender = new ConsoleAppender(patternLayout);
    BasicConfigurator.configure(consoleAppender);
  }

  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_1_error() {
    String dateStr = "01XX";
    int typeDate = 1;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNull(timestamp);
  }

  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_1() {
    String dateStr = "0115";
    int typeDate = 1;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(Calendar.JANUARY, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"      , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_2() {
    String dateStr = "021515";
    int typeDate = 2;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(15, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.FEBRUARY, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"    , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_3() {
    String dateStr = "150331";
    int typeDate = 3;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(31, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.MARCH, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"    , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_4() {
    String dateStr = "15043013";
    int typeDate = 4;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(13, timestamp.get(Calendar.HOUR_OF_DAY));
    assertEquals(30, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.APRIL, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"  , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_5() {
    String dateStr = "15045";
    int typeDate = 5;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(14, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.FEBRUARY, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"     , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_6() {
    String dateStr = "1504513";
    int typeDate = 6;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(13, timestamp.get(Calendar.HOUR_OF_DAY));
    assertEquals(14, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.FEBRUARY, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"   , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_7() {
    String dateStr = "XX15X05";
    int typeDate = 7;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(Calendar.MAY, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"   , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_8() {
    String dateStr = "063015";
    int typeDate = 8;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(30, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.JUNE, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+"    , typeDate="+typeDate+" => "+timestamp);
  }
  
  /**
   * Test de la méthode {@link ParserIO#convertDateTimeFromStr(String, int)}
   */
  @Test
  public void testConvertDateTimeFromStr_9() {
    String dateStr = "31X07XXX15";
    int typeDate = 9;
    ParserIO parserIO = new ParserIO();
    XTimestamp timestamp = parserIO.convertDateTimeFromStr(dateStr, typeDate);
    assertNotNull(timestamp);
    assertEquals(31, timestamp.get(Calendar.DAY_OF_MONTH));
    assertEquals(Calendar.JULY, timestamp.get(Calendar.MONTH));
    assertEquals(2015, timestamp.get(Calendar.YEAR));
    logger.log(Level.INFO, "dateStr="+dateStr+", typeDate="+typeDate+" => "+timestamp);
  }

  /**
   * Test de la méthode {@link ParserIO#getType(String)}
   */
  @Test
  public void testType_ean128() {
    String codeBarre = "010503238401154417140600101196077";
    ParserIO parserIO = new ParserIO();
    Type type = parserIO.getType(codeBarre);
    assertNotNull(type);
    assertEquals(Type.GS1_128, type);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+type);
  }

  /**
   * Test de la méthode {@link ParserIO#getType(String)}
   */
//  @Test
//  public void testType_ean14() {
//    String codeBarre = "10705031065260";
//    ParserIO parserIO = new ParserIO();
//    Type type = parserIO.getType(codeBarre);
//    assertNotNull(type);
//    assertEquals(Type.EAN14, type);
//    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+type);
//  }

  /**
   * Test de la méthode {@link ParserIO#getType(String)}
   */
  @Test
  public void testType_ean15() {
    String codeBarre = "100827002014718";
    ParserIO parserIO = new ParserIO();
    Type type = parserIO.getType(codeBarre.substring(2));
    assertNotNull(type);
    assertEquals(Type.EAN13, type);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+type);
  }

  /**
   * Test de la méthode {@link ParserIO#getSubType(String, Type)}
   */
  @Test
  public void testSubType_01_17_10() {
    String codeBarre = "010503238401154417140600101196077";
    ParserIO parserIO = new ParserIO();
    Type type = parserIO.getType(codeBarre);
    assertNotNull(type);
    assertEquals(Type.GS1_128, type);
    String subType = parserIO.getSubType(codeBarre, type);
    assertNotNull(subType);
    assertEquals("01.17.10", subType);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+subType);
  }

  /**
   * Test de la méthode {@link ParserIO#getSubType(String, Type)}
   */
  @Test
  public void testSubType_01_17_10_2() {
    String codeBarre = "019761279120666810S0299@1711040030180";
    ParserIO parserIO = new ParserIO();
    Type type = parserIO.getType(codeBarre);
    assertNotNull(type);
    assertEquals(Type.GS1_128, type);
    String subType = parserIO.getSubType(codeBarre, type);
    assertNotNull(subType);
    assertEquals("01.10.17.30", subType);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+subType);
  }

  /**
   * Test de la méthode {@link ParserIO#getExpiry(String, Type, String)}
   */
  @Test
  public void testExpiry() {
    String codeBarre = "010503238401154417140600101196077";
    ParserIO parserIO = new ParserIO();
    Type type = parserIO.getType(codeBarre);
    assertNotNull(type);
    assertEquals(Type.GS1_128, type);
    String subType = parserIO.getSubType(codeBarre, type);
    assertNotNull(subType);
    assertEquals("01.17.10", subType);
    String expiry = parserIO.getExpiry(codeBarre, type, subType);
    assertNotNull(expiry);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+expiry);
    assertEquals("140600", expiry);
  }

  /**
   * Test de la méthode {@link ParserIO#getNormalizedExpiry(String)}
   */
  @Test
  public void testNormalizedExpiry() {
    String codeBarre = "010503238401154417140600101196077";
    ParserIO parserIO = new ParserIO();
    String normalizedExpiry = parserIO.getNormalizedExpiry(codeBarre);
    assertNotNull(normalizedExpiry);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+normalizedExpiry);
    assertEquals("20140630", normalizedExpiry);
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_1() {
    String codeBarre = "+$$801120911284930A6";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals("11284930", codeBarreStructure.getLot());
    assertEquals("1209", codeBarreStructure.getExpiry());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_hibc_1() {
    String codeBarre = "+H302FVM080600G";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.HIBC, codeBarreStructure.getType());
    assertEquals("H302", codeBarreStructure.getLic());
    assertEquals("FVM08060", codeBarreStructure.getPcn());
    assertEquals("0", codeBarreStructure.getUom());
    assertEquals("H302FVM080600", codeBarreStructure.getUpn());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_hibc_2() {
    String codeBarre = "]C0+$$52215954321/S12345E/";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.HIBC, codeBarreStructure.getType());
    assertEquals("Secondary.$$.5.S", codeBarreStructure.getSubType());
    assertEquals("22159", codeBarreStructure.getExpiry());
    assertEquals("20220608", codeBarreStructure.getNormalizedExpiry());
    assertEquals("54321", codeBarreStructure.getLot());
    assertEquals("12345E", codeBarreStructure.getSerial());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_hibc_3() {
    String codeBarre = "+$$801011514966626 +";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.HIBC, codeBarreStructure.getType());
    assertEquals("Secondary.$$.8", codeBarreStructure.getSubType());
    assertEquals("0115", codeBarreStructure.getExpiry());
    assertEquals("20150131", codeBarreStructure.getNormalizedExpiry());
    assertEquals("14966626", codeBarreStructure.getLot());
    assertEquals("01", codeBarreStructure.getQuantity());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_ean13() {
    String codeBarre = "4022495085955";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.EAN13, codeBarreStructure.getType());
    assertEquals("4022495", codeBarreStructure.getCompany());
    assertEquals("08595", codeBarreStructure.getProduct());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
//  @Test
//  public void testParse_ean14_1() {
//    String codeBarre = "04022495086068";
//    ParserIO parserIO = new ParserIO();
//    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
//    assertNotNull(codeBarreStructure);
//    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
//    assertEquals(Type.EAN14, codeBarreStructure.getType());
//    assertEquals("4022495", codeBarreStructure.getCompany());
//    assertEquals("08606", codeBarreStructure.getProduct());
//  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
//  @Test
//  public void testParse_ean14_2() {
//    String codeBarre = "00827002226296";
//    ParserIO parserIO = new ParserIO();
//    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
//    assertNotNull(codeBarreStructure);
//    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
//    assertEquals(Type.EAN14, codeBarreStructure.getType());
//    assertEquals("0827002", codeBarreStructure.getCompany());
//    assertEquals("22629", codeBarreStructure.getProduct());
//  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_ean13_3() {
    String codeBarre = "0827002226296";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.EAN13, codeBarreStructure.getType());
    assertEquals("0827002", codeBarreStructure.getCompany());
    assertEquals("22629", codeBarreStructure.getProduct());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_ean13_2() {
    String codeBarre = "0690103180138";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.EAN13, codeBarreStructure.getType());
    assertEquals("18013", codeBarreStructure.getProduct());
    assertEquals("0690103", codeBarreStructure.getCompany());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_NaS_M705884B001() {
    String codeBarre = "M705884B001";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.NaS, codeBarreStructure.getType());
    assertEquals("NaS", codeBarreStructure.getSubType());
    assertEquals("", codeBarreStructure.getLot());
  }
  
  /**
   * Test de la méthode {@link ParserIO#containsASD(String)}
   */
  @Test
  public void testContainsASD() {
    assertTrue(ParserIO.containsASD("+$$52215954321/S12345E/"));
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_GS128_1() {
    String codeBarre = "]C10103401071424301171402281081343";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.GS1_128, codeBarreStructure.getType());
    assertEquals("0", codeBarreStructure.getFamily());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_GS128_2() {
    String codeBarre = "]C102036618090065623754000@1021901656";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.GS1_128, codeBarreStructure.getType());
    assertEquals("54000", codeBarreStructure.getCount());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_GS128_3() {
    String codeBarre = "]C19104701757@1712123110901301138";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.GS1_128, codeBarreStructure.getType());
    assertEquals("91.17.10", codeBarreStructure.getSubType());
    assertEquals("121231", codeBarreStructure.getExpiry());
    assertEquals("20121231", codeBarreStructure.getNormalizedExpiry());
    assertEquals("901301138", codeBarreStructure.getLot());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_GS128_4() {
    String codeBarre = "01300405651225411711103110516649";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.GS1_128, codeBarreStructure.getType());
    assertEquals("01.17.10", codeBarreStructure.getSubType());
    assertEquals("111031", codeBarreStructure.getExpiry());
    assertEquals("20111031", codeBarreStructure.getNormalizedExpiry());
    assertEquals("516649", codeBarreStructure.getLot());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_GS128_5() {
    String codeBarre = "(01)97612791206668(10)S0299\u001D(17)110400(30)180402761279500047477889341";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
    assertEquals(Type.GS1_128, codeBarreStructure.getType());
    assertEquals("01.10.17.30", codeBarreStructure.getSubType());
    assertEquals("110400", codeBarreStructure.getExpiry());
    assertEquals("20110430", codeBarreStructure.getNormalizedExpiry());
    assertEquals("S0299", codeBarreStructure.getLot());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_error() {
    String codeBarre = "402761279500047477889341";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.DEFAULT_STYLE).toString());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_dlc_serie() {
    String codeBarre = "01006431690270911722042321B718589";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.MULTI_LINE_STYLE).toString());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_pcb_content() {
    String codeBarre = "02036620360073911722070137800";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.MULTI_LINE_STYLE).toString());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_pcb_count() {
    String codeBarre = "02036620360073911722070137800";
    ParserIO parserIO = new ParserIO();
    String count = parserIO.getCount(codeBarre);
    assertNotNull(count);
    assertEquals("800", count);
//    logger.log(Level.INFO, "codeBarre="+codeBarre+" => count="+count);
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_01_10_17() {
    String codeBarre = "(01)00841626101142(10)1144377\u001D17200921";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.MULTI_LINE_STYLE).toString());
    assertEquals("00841626101142", codeBarreStructure.getGtin());
    assertEquals("01.10.17", codeBarreStructure.getSubType());
    assertEquals("1144377", codeBarreStructure.getLot());
    assertEquals("20200921", codeBarreStructure.getNormalizedExpiry());
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_lot() {
    String codeBarre = "010084162610114210114437717200921";
    ParserIO parserIO = new ParserIO();
    String lot = parserIO.getLot(codeBarre);
    assertNotNull(lot);
    logger.log(Level.INFO, "lot (cb:"+codeBarre+") => "+lot);
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   * 
   * ^]   \x1d  1d  29  Group separator
   */
  @Test
  public void testParse_codeBarre_01_11_10_17() {
//    String codeBarre = "019761279708995110B00641711040030100  ";
    String codeBarre = "010764017451005411170731\u001D10a-17G14-0917220731";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.MULTI_LINE_STYLE).toString());
    assertEquals("07640174510054", codeBarreStructure.getGtin());
    assertEquals("01.11.10.17", codeBarreStructure.getSubType());
    assertEquals("20170731", codeBarreStructure.getNormalizedProdDate());
    assertEquals("a-17G14-09", codeBarreStructure.getLot());
    assertEquals("20220731", codeBarreStructure.getNormalizedExpiry());
  }
  
  /**
   * Test de la méthode {@link ParserIO#getSubType(String)}
   */
  @Test
  public void testGetSubType_01_11_10_17() {
    String codeBarre = "010764017451005411170731\u001D10a-17G14-0917220731";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    String subType = codeBarreStructure.getSubType();
    assertNotNull(subType);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+subType);
    assertEquals("01.11.10.17", subType);
  }
  
  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_01_10_17_avecSymbologyId() {
    String codeBarre = "]C10100841626101142\u001D10114437717200921";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.MULTI_LINE_STYLE).toString());
    assertEquals("00841626101142", codeBarreStructure.getGtin());
    assertEquals("01.10.17", codeBarreStructure.getSubType());
    assertEquals("1144377", codeBarreStructure.getLot());
    assertEquals("20200921", codeBarreStructure.getNormalizedExpiry());
  }

  /**
   * Test de la méthode {@link ParserIO#parse(String)}
   */
  @Test
  public void testParse_codeBarre_02_17_37_10() {
    String codeBarre = "020405236641249817220731370110800\u001D104298";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+ToStringBuilder.reflectionToString(codeBarreStructure, ToStringStyle.MULTI_LINE_STYLE).toString());
    assertEquals("04052366412498", codeBarreStructure.getContent());
    assertEquals("02.17.37.10", codeBarreStructure.getSubType());
    assertEquals("0110800", codeBarreStructure.getCount());
    assertEquals("4298", codeBarreStructure.getLot());
    assertEquals("20220731", codeBarreStructure.getNormalizedExpiry());
  }
  

  /**
   * Test de la méthode {@link ParserIO#getSubType(String)}
   * Non detecté pour le moment => 02.17.37 le (10) est ignoré
   */
  @Test
  public void testGetSubType_02_17_37_10() {
    String codeBarre = "020405236641249817220731370110800\u001D104298";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    String sousType = codeBarreStructure.getSubType();
    assertNotNull(sousType);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => "+sousType);
    assertEquals("02.17.37.10", sousType);
  }
  
  /**
   * Test de la méthode {@link CodeBarreStructure#getSymbologyId()}
   */
  @Test
  public void testSymbologyId_C10100880304421110() {
    String codeBarre = "]C10100880304421110";
    ParserIO parserIO = new ParserIO();
    CodeBarreStructure codeBarreStructure = parserIO.parse(codeBarre);
    assertNotNull(codeBarreStructure);
    String symbologyId = codeBarreStructure.getSymbologyId();
    assertNotNull(symbologyId);
    logger.log(Level.INFO, "codeBarre="+codeBarre+" => symbologyId="+symbologyId);
  }
}
